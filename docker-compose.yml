version: "3.3"

services:
    mysql:
        image: mysql
        restart: always
        environment:
            MYSQL_DATABASE: "db"
            # So you don't have to use root, but you can if you like
            MYSQL_USER: "fakelook_user"
            # You can use whatever password you like
            MYSQL_PASSWORD: "greps_hazak"
            MYSQL_ROOT_PASSWORD: "lalala"
        ports:
            - 3306:3306
        volumes:
            - sqlData:/var/lib/mysql
        expose:
            - "3306"
    mongo:
        image: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: fakelook_user
            MONGO_INITDB_ROOT_PASSWORD: greps_hazak
        ports:
            - 27017:27017
        volumes: 
            - mongoData:/data/db
    adminer:
        image: adminer
        restart: always
        environment:
            ADMINER_DEFAULT_SERVER: mysql
            ADMINER_PLUGINS: 'tables-filter tinymce'
            ADMINER_DESIGN: rmsoft_blue
        depends_on: 
            - mysql
        ports:
            - 666:8080
    mongo-express:
        image: mongo-express
        restart: always
        ports:
            - 777:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: fakelook_user
            ME_CONFIG_MONGODB_ADMINPASSWORD: greps_hazak
        depends_on: 
            - mongo
    auth:
        build: 
            context: .
            dockerfile: ./docker/service_auth.dockerfile
        env_file: ./environments/auth.env
    identity:
        build: 
            context: .
            dockerfile: ./docker/service_identity.dockerfile
    posts:
        build: 
            context: .
            dockerfile: ./docker/service_posts.dockerfile
    view:
        build: 
            context: .
            dockerfile: ./docker/service_view.dockerfile
    server:
        build: 
            context: .
            dockerfile: ./docker/server.dockerfile
        ports: 
            - 4000:4000
        environment:
            SQUASH_DOMAIN: ${SQUASH_DOMAIN}
            AUTH_DOMAIN: auth
            IDENTITY_DOMAIN: identity
            POSTS_DOMAIN: posts
            VIEW_DOMAIN: view
        depends_on: 
            - auth
            - identity
            - posts
            - view
    client:
        build: 
            context: .
            dockerfile: ./docker/client.dockerfile
        ports: 
            - 80:80
        environment:
            VUE_APP_SERVER: http://api--${SQUASH_DOMAIN}
        depends_on: 
            - adminer
            - mongo-express
            - server

volumes:
    sqlData:
    mongoData:
